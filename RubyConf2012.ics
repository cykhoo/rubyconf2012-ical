BEGIN:VCALENDAR
METHOD:PUBLISH
VERSION:2.0
X-WR-CALNAME:RubyConf2012
PRODID:-//Apple Inc.//Mac OS X 10.8.2//EN
X-APPLE-CALENDAR-COLOR:#CC66FF
X-WR-TIMEZONE:Asia/Singapore
CALSCALE:GREGORIAN
BEGIN:VTIMEZONE
TZID:America/Denver
BEGIN:DAYLIGHT
TZOFFSETFROM:-0700
RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU
DTSTART:20070311T020000
TZNAME:MDT
TZOFFSETTO:-0600
END:DAYLIGHT
BEGIN:STANDARD
TZOFFSETFROM:-0600
RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU
DTSTART:20071104T020000
TZNAME:MST
TZOFFSETTO:-0700
END:STANDARD
END:VTIMEZONE
BEGIN:VEVENT
CREATED:20120918T085557Z
UID:04452B11-A8E3-4A2F-9C98-1EFFA6E7F960
DTEND;TZID=America/Denver:20121101T100000
TRANSP:OPAQUE
SUMMARY:Registration
DTSTART;TZID=America/Denver:20121101T083000
DTSTAMP:20120918T085628Z
LOCATION:Lobby
SEQUENCE:9
DESCRIPTION:Get your badges and get ready!
BEGIN:VALARM
X-WR-ALARMUID:4FB1BBB4-F77D-48D9-AC48-0C4CE75F5B4C
UID:4FB1BBB4-F77D-48D9-AC48-0C4CE75F5B4C
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121024T101014Z
UID:39F27646-037B-419E-BE1B-3E8DFDCCC912
DTEND;TZID=America/Denver:20121101T210000
TRANSP:OPAQUE
SUMMARY:The Ultimate iTriage Hoedown
LAST-MODIFIED:20121024T101758Z
DTSTAMP:20121024T101801Z
DTSTART;TZID=America/Denver:20121101T180000
LOCATION:The Ultimate iTriage Hoedown  iTriage Headquarters 1500 Wynkoop
  St #500 Denver\, CO 80202
SEQUENCE:0
BEGIN:VALARM
X-WR-ALARMUID:6A579C6E-4ED7-427C-B841-50C4E8DB8C38
UID:6A579C6E-4ED7-427C-B841-50C4E8DB8C38
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T030806Z
UID:8A0E5CE9-183C-4467-A11F-1DF1CAF17C05
DTEND;TZID=America/Denver:20121101T102000
TRANSP:OPAQUE
SUMMARY:Announcements
DTSTART;TZID=America/Denver:20121101T100000
DTSTAMP:20121025T030848Z
SEQUENCE:3
BEGIN:VALARM
X-WR-ALARMUID:72FB228B-CE04-41AC-9D3A-6F7E43842AF1
UID:72FB228B-CE04-41AC-9D3A-6F7E43842AF1
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T030841Z
UID:0DDC6135-1D93-4F26-81A5-CC6AD7C371D1
DTEND;TZID=America/Denver:20121101T111500
TRANSP:OPAQUE
SUMMARY:Matz's Keynote
DTSTART;TZID=America/Denver:20121101T102000
DTSTAMP:20121025T035545Z
SEQUENCE:5
DESCRIPTION:Matz tell us all about the wonderful world of Ruby!
BEGIN:VALARM
X-WR-ALARMUID:1E4CA432-A6DE-4759-8A08-E9BB0A714751
UID:1E4CA432-A6DE-4759-8A08-E9BB0A714751
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T031128Z
UID:F8CEB304-B32B-4D3D-8F70-F6A2E8AF9D9F
DTEND;TZID=America/Denver:20121101T133000
TRANSP:OPAQUE
SUMMARY:Lunch
DTSTART;TZID=America/Denver:20121101T121500
DTSTAMP:20121025T031138Z
SEQUENCE:3
BEGIN:VALARM
X-WR-ALARMUID:760438D8-5CB2-4310-8105-10C9F6842AFA
UID:760438D8-5CB2-4310-8105-10C9F6842AFA
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032700Z
UID:6CA9D6AB-19FB-4B02-ADF0-6514B356E03F
DTEND;TZID=America/Denver:20121101T121500
TRANSP:OPAQUE
SUMMARY:Allow me to reintroduce myself. My name is MagLev. (Jesse Cooke)
 
DTSTART;TZID=America/Denver:20121101T113000
DTSTAMP:20121025T035602Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Remember when Avi Bryant spoke at RailsConf '07 about Ruby's
  future\, and how it'd be slick if we could get to where Smalltalk was 3
 0 years ago? Well\, we kinda have\, in some respects\, with the 1.0 rele
 ase of MagLev\, a Ruby implementation running on a Smalltalk VM.\n\nWhat
  makes MagLev really special? How about a baked-in object database that 
 sits on top of a VM almost 30 years in the making? There are a lot of co
 ol things you can do with this type of persistence\, but it's quite diff
 erent from what we do in a typical Ruby app.\n\nLet's explore what this 
 great implementation has to offer\, and learn how to help it along.
BEGIN:VALARM
X-WR-ALARMUID:FF2AEE0F-7DEA-4BE2-ADE8-5CF87DB7D0EA
UID:FF2AEE0F-7DEA-4BE2-ADE8-5CF87DB7D0EA
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032708Z
UID:EC635781-6DB6-4FB2-81C8-1A20F839256B
DTEND;TZID=America/Denver:20121101T141500
TRANSP:OPAQUE
SUMMARY:Implementation Details of Ruby 2.0 VM (Koichi Sasada)
DTSTART;TZID=America/Denver:20121101T133000
DTSTAMP:20121025T035656Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:As a member of Matz's team in Heroku\, I'm working Ruby 2.0 
 to be released in next February. Ruby 2.0 doesn't have drastic changes i
 n behavior except adding some new features. However\, an internal of Rub
 y 2.0 VM is changing to improve performance! For example\, we changed VM
  data structures and method invocation processes to achieve fast executi
 on. In this presentation\, I will introduce the internal changes and its
  performance.\n\n
BEGIN:VALARM
X-WR-ALARMUID:925A0FF7-66A4-4481-9C60-09B520F9E907
UID:925A0FF7-66A4-4481-9C60-09B520F9E907
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032714Z
UID:25B7C477-767F-4A61-B392-1330A21C6E3F
DTEND;TZID=America/Denver:20121101T151500
TRANSP:OPAQUE
SUMMARY:Ruby 2.0 on Rails (Akira Matsuda)
DTSTART;TZID=America/Denver:20121101T143000
DTSTAMP:20121025T035828Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Ruby 2.0 is coming very soon. The specification is fixed\, a
 nd the first stable release will be in production in several months.\n\n
 Now is the time to get prepared for 2.0\n\nWhat new features are availab
 le in 2.0? How can our code\, and lives be improved by these new feature
 s? Where are the examples?\n\nThis session will detail some of the great
  improvements in Ruby 2.0 such as:\n\nrefinements\nModule#prepend\nkeywo
 rd arguments\nEnumerator::Lazy\nnew literals\nand other lovely new featu
 res\nWe'll cover these new features in depth with working code samples e
 xtracted from everyone's favorite and most widely read Ruby code - the R
 uby on Rails framework\, plugins\, your Rails applications\, and test co
 des.
BEGIN:VALARM
X-WR-ALARMUID:FF28E248-3F9D-4851-93CD-E29223811F59
UID:FF28E248-3F9D-4851-93CD-E29223811F59
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032720Z
UID:03282A66-0C28-4FFC-B884-A93A682DD1B6
DTEND;TZID=America/Denver:20121101T161500
TRANSP:OPAQUE
SUMMARY:Toward a Design for Ruby (Brian Ford)
DTSTART;TZID=America/Denver:20121101T153000
DTSTAMP:20121025T035916Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Ruby is an industrial programming language. In the past eigh
 t years\, tens of millions of dollars\, if not more\, have been invested
  in Ruby itself\, and in frameworks and libraries for the language. Many
  times that have been invested in companies that have been built around 
 Ruby.\n\nThe reason for this is that Ruby has been a remarkably good lan
 guage for a wide domain of programming problems.\n\nHowever\, the world 
 is changing rapidly and Ruby faces a number of significant challenges th
 at have a very real possibility of destroying the rich ecosystem that th
 at has been built around Ruby.\n\nNone of these significant challenges a
 re particularly threatening to Ruby. In fact\, many of them have been so
 lved by other language ecosystems or are being actively researched.\n\nT
 he fundamental problem is that the Ruby design process is practically no
 nexistent. What does exist is opaque\, ad hoc\, immature\, and unstructu
 red. Stakeholders are not consulted. Rationales are not consistently exp
 lained. Technical expertise is not validated.\n\nIn this talk\, I will e
 xplain key areas where I believe Ruby's existing design process threaten
 s the viability of the language. I will detail a structure for making Ru
 by design decisions that provides technical rigor and balances the compe
 ting interests of existing and future Ruby stakeholders.
BEGIN:VALARM
X-WR-ALARMUID:0ABE00F7-B300-4937-AB67-8AB82FCC7CAF
UID:0ABE00F7-B300-4937-AB67-8AB82FCC7CAF
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032726Z
UID:555D9593-5DFE-4079-BE6D-0A73B711A216
DTEND;TZID=America/Denver:20121101T171500
TRANSP:OPAQUE
SUMMARY:Why JRuby Works (Charles Oliver Nutter\, Tom Enebo)
DTSTART;TZID=America/Denver:20121101T163000
DTSTAMP:20121025T035959Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:There's a lot to love about JRuby. It performs better than j
 ust about any other implementation. It has solid\, reliable\, parallel t
 hreading. Its extensions are managed code and won't segfault or interfer
 e with threads or GC. And it gives Ruby access to anything that can run 
 on a JVM\, including code written in other languages.\n\nBut how does it
  work? More importantly\, why does it work so well?\n\nThis talk will di
 g into the nitty-gritty details of how JRuby takes advantage of JVM opti
 mization\, threading\, GC\, and language integration. We'll show why Rub
 y works so well on top of the JVM and what it means for you. And we'll e
 xplore the future of the JVM and how it will make JRuby even better (and
  JRubyists even happier).
BEGIN:VALARM
X-WR-ALARMUID:7B1B08E6-AFB1-44D9-AC6E-81C35EBAC1D8
UID:7B1B08E6-AFB1-44D9-AC6E-81C35EBAC1D8
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032731Z
UID:E026F060-690B-4E8E-B74C-0BD700852597
DTEND;TZID=America/Denver:20121101T181500
TRANSP:OPAQUE
SUMMARY:Tokaido: Making Ruby Better on OSX (Yehuda Katz)
DTSTART;TZID=America/Denver:20121101T173000
DTSTAMP:20121025T040049Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Last summer\, I worked on a project that aimed to improve th
 e experience of working with Ruby on OSX. Tokaido is a multifaceted proj
 ect: it involved creating a portable binary build\, a UI for working wit
 h Ruby-based web projects in development mode\, and helping gem authors 
 distribute their gems as precompiled binaries.\n\nThe ultimate goal: mak
 e it easy for Mac users to program with Ruby without needing to install 
 and maintain a host of unrelated development tools.\n\nIn this talk\, I 
 will cover the basic architecture of Tokaido\, and talk about what I lea
 rned about building and distributing Ruby during the process. This talk 
 will cover some interesting low-level details of how Ruby loads and exec
 utes native code\, and why I chose static linking for Tokaido. If you ha
 ven't given much thought to how "native gems" work in Ruby\, you'll lear
 n something from this talk.
BEGIN:VALARM
X-WR-ALARMUID:791F3CC1-8DE2-45DF-A6EB-FA913D1B522C
UID:791F3CC1-8DE2-45DF-A6EB-FA913D1B522C
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032928Z
UID:28ED387C-079F-48B1-899D-F20C9353F7F1
DTEND;TZID=America/Denver:20121101T121500
TRANSP:OPAQUE
SUMMARY:Abstracting Features Into Custom Reverse Proxies (Or: Making Bet
 ter Lemonade From Chaos) (Nick Muerdter)
DTSTART;TZID=America/Denver:20121101T113000
DTSTAMP:20121025T035624Z
SEQUENCE:2
DESCRIPTION:Life isn't always simple. We often have to deal with a mishm
 ash of applications\, languages\, and servers. How can we begin to stand
 ardize functionality across this chaos? Custom reverse proxies to the re
 scue! Using Ruby and EventMachine\, learn how you can abstract high-leve
 l features and functionality into fast reverse proxies that can improve 
 scalability\, save time\, and make the world happy.\n\nSee how we've app
 lied this across a diverse set of web service APIs to standardize the im
 plementation of authentication\, request throttling\, analytics\, and mo
 re.\nSee how this can save development time\, eliminate code duplication
 \, make your team happy\, make the public happy\, and make you a hero.\n
 See how this can be applied to any TCP-based application for a wide-vari
 ety of use cases.\nStill think your situation is complicated? Learn abou
 t the U.S. Government's plans to standardize API access across the entir
 e federal government. With some reverse proxy magic\, this isn't quite a
 s difficult or as foolhardy as it may first sound. It also comes with so
 me nice benefits for both the public audience and government developers.
 
BEGIN:VALARM
X-WR-ALARMUID:6527B9CA-0B16-49F4-8ABD-8C8D687ED6BB
UID:6527B9CA-0B16-49F4-8ABD-8C8D687ED6BB
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032931Z
UID:20481D07-6283-45A5-9523-7E1EB61F7DF0
DTEND;TZID=America/Denver:20121101T141500
TRANSP:OPAQUE
SUMMARY:Service Oriented Architecture at Square (Chris Hunt)
DTSTART;TZID=America/Denver:20121101T133000
DTSTAMP:20121025T035728Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:SOA is hard. Learn how Square is approaching this problem to
 day with JRuby and where we hope to be in the future. We'll go from git 
 init to cap deploy\, covering Square's approach to testing and service i
 solation\, dependency management\, API documentation\, code quality metr
 ics\, data seeding\, schema versioning\, logging\, exception handling\, 
 security and password management\, deployment and more.
BEGIN:VALARM
X-WR-ALARMUID:9E94619B-81FB-49AF-81AE-C539F12D56F8
UID:9E94619B-81FB-49AF-81AE-C539F12D56F8
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032937Z
UID:26C3AC6F-C9AB-4242-BDC1-551C985CC6E7
DTEND;TZID=America/Denver:20121101T151500
TRANSP:OPAQUE
SUMMARY:Ruby Monitoring State of the Union (Joseph Ruscio)
DTSTART;TZID=America/Denver:20121101T143000
DTSTAMP:20121025T035847Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:A survey of the current state-of-the-art projects available 
 for runtime monitoring of production Ruby code\, encompassing everything
  from cron jobs to web-servers. Provides the audience with an overview o
 f best practices as well as highlighting the remaining gaps. Covers both
  instrumentation and visualization/analysis.
BEGIN:VALARM
X-WR-ALARMUID:9BE70236-7427-40A0-9B79-8E455F7E6511
UID:9BE70236-7427-40A0-9B79-8E455F7E6511
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032955Z
UID:DB3A6456-6244-449A-B485-1C6D5B06D969
DTEND;TZID=America/Denver:20121101T161500
TRANSP:OPAQUE
SUMMARY:Zero Downtime Deploys Made Easy (Matt Duncan)
DTSTART;TZID=America/Denver:20121101T153000
DTSTAMP:20121025T035934Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:Every deploy introduces the risk of downtime because of chan
 ges which are not backwards compatible. At Yammer\, we deploy our Rails 
 codebase to hundreds of servers many times a week. In this talk\, I'll d
 iscuss many of the strategies we use to mitigate downtime during deploys
 . This includes how we handle database changes as well as background wor
 kers and external services.
BEGIN:VALARM
X-WR-ALARMUID:1F4DA531-A3FD-40F0-A98D-D987BABEC93F
UID:1F4DA531-A3FD-40F0-A98D-D987BABEC93F
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T032958Z
UID:1751F2F3-AACB-42B0-BFA0-81AFE8A14E24
DTEND;TZID=America/Denver:20121101T171500
TRANSP:OPAQUE
SUMMARY:Your app is not a black box (Josh Kalderimis)
DTSTART;TZID=America/Denver:20121101T163000
DTSTAMP:20121025T040013Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:This talk is part story\, part code\, and part mustache.\n\n
 Travis CI is a distributed continuous integration system running over 7\
 ,000 tests daily. For us to get a true insight into what is going on beh
 ind the scenes we have had to come a long way by integrating and buildin
 g both tools and libraries so that Travis and its many parts are not jus
 t a black box of information.\n\nReading logs and using NewRelic is not 
 new\, but far from enough\, especially when it comes to apps which are c
 omposed of many smaller apps\, like Travis. How do you track and visuali
 ze requests being processed by multiple services? How do you silence ver
 bose logs while not losing the core of the message? And how do you aggre
 gate\, visualize and share metrics?\n\nA lot of how we track\, manage\, 
 and visualize what is going on in Travis has been created as a set of in
 ternal tools and by using a range of awesome services\, but core to a lo
 t of this is ActiveSupport Notifications and Travis Instrumentation.\n\n
 This session will give insight to how Travis is composed and connected\,
  as well as shedding light on how simple it can be to gain more visibili
 ty into even a complex\, distributed system like Travis\, as well as you
 r applications too.
BEGIN:VALARM
X-WR-ALARMUID:E1FE5977-5737-4FF8-909E-7984D302A35B
UID:E1FE5977-5737-4FF8-909E-7984D302A35B
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033002Z
UID:12A5A8FF-C487-4A5B-803E-22887D3E72B5
DTEND;TZID=America/Denver:20121101T181500
TRANSP:OPAQUE
SUMMARY:Building modular\, scalable web apps? Of CORS! (Michael Bleigh)
DTSTART;TZID=America/Denver:20121101T173000
DTSTAMP:20121025T040104Z
LOCATION:Track 2
SEQUENCE:4
DESCRIPTION:Cross Origin Resource Sharing (CORS) gives browsers the long
 -desired ability to make AJAX requests cross-domain. Even better\, this 
 functionality is dead simple to implement in Ruby. But while the impleme
 ntation of CORS is simple\, the implications are not. In this session le
 arn about:\n\nThe many applications of CORS\nUsing CORS to drive your ap
 plication with a RESTful API\nEmpowering 3rd party developers through re
 gistered CORS apps\nImplementing simple\, secure user authentication for
  CORS apps\nScale pieces of your app independently using CORS
BEGIN:VALARM
X-WR-ALARMUID:17A110DD-DD62-4502-8DC9-34F2FF10C476
UID:17A110DD-DD62-4502-8DC9-34F2FF10C476
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033051Z
UID:69300DEF-FE4B-4C6B-935D-FA257D9DA5D8
DTEND;TZID=America/Denver:20121101T121500
TRANSP:OPAQUE
SUMMARY:Ruby HTTP clients comparison (Hiroshi Nakamura)
DTSTART;TZID=America/Denver:20121101T113000
DTSTAMP:20121025T035638Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:The simplicity of the Ruby bundled library net/http has prod
 uced number of derivation / substitution HTTP clients for Ruby. I\, who 
 is an author of a HTTP client\, performed surveys of those HTTP clients 
 in last several years. One unsurprising thing I found from it is that us
 ers can pick one-gem-for-all generic HTTP client and also can pick the b
 est one for the specified purpose.\n\nIn this talk\, based on update to 
 the advantages-and-disadvantages comparison of HTTP clients at http://bi
 t.ly/RubyHTTPClients\, I'll introduce characteristics of HTTP clients fo
 r different purposes.
BEGIN:VALARM
X-WR-ALARMUID:5038FFCE-4C61-49B4-83F0-B079C1938ABC
UID:5038FFCE-4C61-49B4-83F0-B079C1938ABC
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033101Z
UID:8294B20D-474C-4D4A-981C-D3EEE0B12107
DTEND;TZID=America/Denver:20121101T141500
TRANSP:OPAQUE
SUMMARY:Someone is Wrong (Joseph Wilk)
DTSTART;TZID=America/Denver:20121101T133000
DTSTAMP:20121025T035802Z
LOCATION:Track 3
SEQUENCE:5
DESCRIPTION:Inspiration strikes you\, you’ve done it. You have found the
  missing 7 letters from the MVC model. This changes everything. You star
 t discussing it with your pair. 10 minutes later you somehow find yourse
 lf arguing if mocks are good or bad. Jettisoning your pair you gather al
 l you’re fellow colleagues for a quick discussion. Bracing yourself you 
 unleash the full power of your words. 10 minutes later and somehow your 
 idea has been lost and the discussion has devolved into discussing if mo
 cks are good or bad. You’re not quite sure what happend but you walk awa
 y realising you failed to convince your team or pair of this amazing con
 cept. Maybe it was a bad idea\, maybe it was the idea that would make ev
 eryones life better. Being able to convince and discuss your idea is the
  skill of Rhetoric. A tool no developer can live without.
BEGIN:VALARM
X-WR-ALARMUID:D77160D2-E9C7-45F9-BB73-957BBE6AEAC7
UID:D77160D2-E9C7-45F9-BB73-957BBE6AEAC7
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033106Z
UID:6E4F1676-F712-46D6-8E90-693E77888830
DTEND;TZID=America/Denver:20121101T151500
TRANSP:OPAQUE
SUMMARY:Failure for Fun and Profit! (Kerri Miller)
DTSTART;TZID=America/Denver:20121101T143000
DTSTAMP:20121025T035900Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:Do you actually know how deliberately acquire\, sharpen\, an
 d retain a technical skill? In this talk\, I'll discuss common strategie
 s to enable you to be more focused\, creative\, and productive while lea
 rning\, by using play\, exploration\, and ultimately failure. You'll lea
 ve knowing several "Experiential Learning" patterns and techniques that 
 can help you turn failure into success.\n\nWhen was the last time you fa
 iled in a spectacular fashion? Was it really so bad? If you want to succ
 eed\, you first need to take a little time to fail.\n\n
BEGIN:VALARM
X-WR-ALARMUID:969301CA-C57B-4B38-AF0D-35C1F32774A6
UID:969301CA-C57B-4B38-AF0D-35C1F32774A6
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033110Z
UID:A61A0178-0AC5-4AFA-89F6-BE118DF50169
DTEND;TZID=America/Denver:20121101T161500
TRANSP:OPAQUE
SUMMARY:Building Data Driven Products with Ruby (Ryan Weald)
DTSTART;TZID=America/Denver:20121101T153000
DTSTAMP:20121025T035946Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:Big data and data science have become hot topics in the deve
 loper community during the past year. This talk will show how ruby is us
 ed to build real data driven products at scale.\n\nData scientist Ryan W
 eald walks through the building of data driven products at Sharethrough\
 , from exploratory analysis to production systems\, with an emphasis on 
 the role Ruby plays in each phase of the data driven product cycle.\n\nH
 e discusses how Ruby interacts with other data analysis tools -- such as
  Hadoop\, Cascading\, Python\, and Javascript -- with a constructive loo
 k at Ruby's weaknesses\, and presents suggestions on how Ruby can contri
 bute more to data science in the areas of visualization and machine lear
 ning.
BEGIN:VALARM
X-WR-ALARMUID:DF76E460-ACC5-448C-9073-9E19E69AF109
UID:DF76E460-ACC5-448C-9073-9E19E69AF109
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033115Z
UID:A5C21F2F-E27A-4E12-A25D-3C6B819011D4
DTEND;TZID=America/Denver:20121101T171500
TRANSP:OPAQUE
SUMMARY:Refactoring from Good to Great (Ben Orenstein)
DTSTART;TZID=America/Denver:20121101T163000
DTSTAMP:20121025T040032Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:Most developers know enough about refactoring to write code 
 that's pretty good. They create short methods\, and classes with one res
 ponsibility. They're also familiar with a good handful of refactorings\,
  and the code smells that motivate them.\n\nThis talk is about the next 
 level of knowledge: the things advanced developers know that let them tu
 rn good code into great. Code that's easy to read and a breeze to change
 .\n\nThese topics will be covered solely by LIVE CODING\; no slides. We'
 ll boldly refactor right on stage\, and pray the tests stay green. You m
 ight even learn some vim tricks as well as an expert user shows you his 
 workflow.\n\nTopics include:\n\nThe Open-Closed Principle\nThe types of 
 coupling\, and their dangers\nWhy composition is so damn great\nA powerf
 ul refactoring that Kent Beck refers to as "deep deep magic"\nHow to des
 troy conditionals with a NullObject\nThe beauty of the Decorator pattern
 \nTesting smells\, including Mystery Guest and stubbing the system under
  test\nThe stuff from the last halves of Refactoring and Clean Code that
  you never quite got to.
BEGIN:VALARM
X-WR-ALARMUID:BBB81587-8ABE-4203-B879-73E08521F002
UID:BBB81587-8ABE-4203-B879-73E08521F002
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033119Z
UID:332F3154-CD80-4721-BDB2-8601F255E50F
DTEND;TZID=America/Denver:20121101T181500
TRANSP:OPAQUE
SUMMARY:Dissecting a Ruby Block (Pat Shaughnessy)
DTSTART;TZID=America/Denver:20121101T173000
DTSTAMP:20121025T040115Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:More than any other feature of the language\, in my opinion 
 blocks are what make using Ruby fun. But what is a block\, exactly? What
  would I see if I could cut one open and look inside? During this talk w
 e’ll:\n\nExplore Ruby’s internal implementation of blocks\, lambdas\, pr
 ocs and bindings.\nLearn how closures and metaprogramming are related in
  Ruby internals.\nDiscover what metaclasses and singleton classes are an
 d how Ruby uses them.\nDo you really need to know how Ruby works interna
 lly to be a good Ruby developer? Probably not. But taking a peek under t
 he hood can help you better understand the language… and is a lot of fun
 !
BEGIN:VALARM
X-WR-ALARMUID:BAE67520-0546-4DE7-909B-A0BC37FFE278
UID:BAE67520-0546-4DE7-909B-A0BC37FFE278
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033641Z
UID:D8C02AB8-F267-4A47-A254-2B5C37F8EDE2
DTEND;TZID=America/Denver:20121102T190000
TRANSP:OPAQUE
SUMMARY:Lightning Talks
DTSTART;TZID=America/Denver:20121102T173000
DTSTAMP:20121025T040531Z
SEQUENCE:7
DESCRIPTION:Lightning talks! Talks so fast\, they're like.. well.. light
 ning!
BEGIN:VALARM
X-WR-ALARMUID:D4A423E2-C279-480B-B812-7030A2BA4A02
UID:D4A423E2-C279-480B-B812-7030A2BA4A02
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033711Z
UID:14C5B8FF-C87B-487F-9E9B-A5133D61F521
DTEND;TZID=America/Denver:20121102T111500
TRANSP:OPAQUE
SUMMARY:Keynote: Y Not - Adventures in Functional Programming (Jim Weiri
 ch)
DTSTART;TZID=America/Denver:20121102T102000
DTSTAMP:20121025T040140Z
SEQUENCE:4
DESCRIPTION:One of the deepest mysteries in the functional programming w
 orld is the Y-Combinator. Many have heard of it\, but few have mastered 
 its mysteries. Although fairly useless in real world software\, understa
 nding how the Y-Combinator works and why it is important gives the stude
 nt an important insight into the nature of functional programming.\n\nJo
 in with us on this journey of understanding. Be prepared to curry your f
 unctions and bind your lambdas as we delve into the whys and wherefores 
 of this paragon of functional programming. Although you will probably ne
 ver have a need for the combinator\, the effort put forth to understand 
 it will improve your functional programming chops. This talk is not for 
 the faint of heart\, but the successful student will be richly rewarded.
 \n\nAlso\, you will understand why "Y-Combinator" is the perfect name fo
 r Paul Graham's start-up funding company.
BEGIN:VALARM
X-WR-ALARMUID:A98128F2-08FE-4F70-84CF-884D8E4450E0
UID:A98128F2-08FE-4F70-84CF-884D8E4450E0
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033854Z
UID:7F1CFE5E-8235-410C-9854-9F6E6D45DE99
DTEND;TZID=America/Denver:20121102T133000
TRANSP:OPAQUE
SUMMARY:Lunch
DTSTART;TZID=America/Denver:20121102T121500
DTSTAMP:20121025T033854Z
SEQUENCE:1
BEGIN:VALARM
X-WR-ALARMUID:CAB66926-7C16-4164-A2CB-E7C5EE4E4FBC
UID:CAB66926-7C16-4164-A2CB-E7C5EE4E4FBC
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033904Z
UID:55A63116-568A-4660-A761-FDDBA9768D18
DTEND;TZID=America/Denver:20121102T102000
TRANSP:OPAQUE
SUMMARY:Announcements
DTSTART;TZID=America/Denver:20121102T100000
DTSTAMP:20121025T033904Z
SEQUENCE:1
BEGIN:VALARM
X-WR-ALARMUID:BC2BE64E-3F0A-4BD3-BFC9-337210657F93
UID:BC2BE64E-3F0A-4BD3-BFC9-337210657F93
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033916Z
UID:688C5AF3-13C7-4996-B24F-3DD69A2CC6ED
DTEND;TZID=America/Denver:20121102T113000
TRANSP:OPAQUE
SUMMARY:Ruby vs. the world (Matt Aimonetti)
DTSTART;TZID=America/Denver:20121102T113000
DTSTAMP:20121025T040158Z
LOCATION:Track 1
SEQUENCE:4
DESCRIPTION:Ruby is an awesome programming language\, it's so pleasing y
 ou probably haven't seriously looked at other languages since you switch
 ed. The programming world is evolving fast\, new languages are created d
 aily\, new trends are emerging. Let's take a few minutes to look at a fe
 w languages from a Ruby developer perspective.
BEGIN:VALARM
X-WR-ALARMUID:6A7C94DB-90A1-4748-AA31-DA10F18B0FDD
UID:6A7C94DB-90A1-4748-AA31-DA10F18B0FDD
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033922Z
UID:8A599F38-06B2-40F4-B457-0A491332B995
DTEND;TZID=America/Denver:20121102T141500
TRANSP:OPAQUE
SUMMARY:Real Time Salami (Aaron Patterson)
DTSTART;TZID=America/Denver:20121102T133000
DTSTAMP:20121025T040244Z
LOCATION:Track 1
SEQUENCE:6
DESCRIPTION:Do you like building real time systems? Do you like salami? 
 Then you will enjoy this talk! We're going to learn the process for curi
 ng meats at home\, along with integrating the meat curing process with r
 eal time systems and Rails 4. Challenges of meat curing\, and Rails inte
 rnals will be discussed.\n\nSalami is a delicious treat! Let's enjoy it 
 together.
BEGIN:VALARM
X-WR-ALARMUID:D15C35C1-8D71-494B-8FE1-65EC40DEDFFD
UID:D15C35C1-8D71-494B-8FE1-65EC40DEDFFD
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033926Z
UID:B165CA7D-8AC5-4179-AE4C-D486002319D7
DTEND;TZID=America/Denver:20121102T151500
TRANSP:OPAQUE
SUMMARY:Arduino the Ruby way (Austin Vance)
DTSTART;TZID=America/Denver:20121102T143000
DTSTAMP:20121025T040324Z
LOCATION:Track 1
SEQUENCE:5
DESCRIPTION:What's the deal\nWriting software is great\, websites\, appl
 ications\, and scripts are things we interact with every day. What about
  writing software that we can interact with in the physical world? From 
 automated sprinkler systems that turn off when you pull into your drive 
 way\, to scoreboards at the company foosball table physical computing op
 ens a door for the innovator inside every software engineer.\n\nIt's too
  hard\nNot true\, there are amazing libraries and compilers that let us 
 write software for Arduinos in the best language\, Ruby. Think about it 
 no C\, no headers\, and no static types\, just plain old ruby. That is a
  good deal.\n\nIn this talk I will go over a few of the most popular Rub
 y libraries for interacting with an Arduino\, talk about some basics of 
 each library and then spend time on how these libraries and Arduino can 
 interact to create applications that respond in the physical world. Ther
 e will be t-shirts shot from a robotic cannon.
BEGIN:VALARM
X-WR-ALARMUID:095BC132-267A-4E6F-8C7E-FEABF02A8924
UID:095BC132-267A-4E6F-8C7E-FEABF02A8924
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033933Z
UID:5E71B52F-6DA9-4F59-A1AE-CC7AC42E82B1
DTEND;TZID=America/Denver:20121102T161500
TRANSP:OPAQUE
SUMMARY:Xiki: the Rubyfied Next-Generation Shell Console (Craig Muth)
DTSTART;TZID=America/Denver:20121102T153000
DTSTAMP:20121025T040410Z
LOCATION:Track 1
SEQUENCE:5
DESCRIPTION:The shell console hasn't changed in 40 years. Time for an up
 date. Use Ruby to make commands that have menus\, that you can navigate 
 with the keyboard or your mouse. Type commands anywhere\, not just at th
 e bottom prompt. Control your rails apps\, web browser\, databases\, and
  other tools. Type wiki elements like headings and bullet points. Xiki i
 s implemented in ruby. Make new commands out of simple ruby classes.
BEGIN:VALARM
X-WR-ALARMUID:615D47B5-8DA3-4202-8A8B-98DC0BB875BD
UID:615D47B5-8DA3-4202-8A8B-98DC0BB875BD
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T033942Z
UID:DE6C094F-50B3-48CE-BDEC-3E6F986A0A3B
DTEND;TZID=America/Denver:20121102T171500
TRANSP:OPAQUE
SUMMARY:The Celluloid Ecosystem (Tony Arcieri)
DTSTART;TZID=America/Denver:20121102T163000
DTSTAMP:20121025T040456Z
LOCATION:Track 1
SEQUENCE:5
DESCRIPTION:Celluloid is a concurrent object framework for Ruby that tak
 es the headache out of building multithreaded programs. However\, it's a
 lso an ecosystem of subprojects including the Reel web server for WebSoc
 kets\, Celluloid::IO for evented sockets\, Celluloid::ZMQ for ZeroMQ soc
 kets\, and DCell for building distributed Ruby programs. This talk will 
 examine all of these components and help you decide which ones to use in
  your multithreaded Ruby programs.
BEGIN:VALARM
X-WR-ALARMUID:32B201EE-0119-4F39-A6B4-2183C41009F8
UID:32B201EE-0119-4F39-A6B4-2183C41009F8
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034137Z
UID:809A5F23-AAD0-4DB3-9ECA-5AF6243EFD39
DTEND;TZID=America/Denver:20121102T113000
TRANSP:OPAQUE
SUMMARY:Grow Your Unix Beard Using Ruby (Jesse Storimer)
DTSTART;TZID=America/Denver:20121102T113000
DTSTAMP:20121025T040219Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:Ruby\, like Perl before it\, has great support for systems p
 rogramming and interfaces to common system calls. Unfortunately\, this d
 oesn't get talked about much in the Ruby community. In an age where alte
 rnative runtimes and threads are getting lots of attention many of the l
 argest Rails deployments are running on single-threaded\, blocking I/O\,
  preforking web server called Unicorn.\n\nThis talk will be a safari tou
 r through the unique features and internals of Unicorn. By strongly foll
 owing the Unix philosophy of 'doing one thing well' Unicorn has carved o
 ut a reputation as a high-performance\, dependable choice for Ruby apps.
 \n\nThe Unicorn codebase is the best\, most comprehensive example of Uni
 xsystems programming in Ruby that I've come across. You'll see real-worl
 dexamples of fork(2)\, accept(2)\, execve(2)\, and others. I'll walk thr
 oughhow Unicorn distributes connections across a shared socket\, how it 
 implements deferred signal handling\, how it can replace a running insta
 nce of itself without losing any connections. Trust me\, by the time it'
 s over you'll begin to feel mysteriously compelled to start growing your
  Unix beard.
BEGIN:VALARM
X-WR-ALARMUID:D5C0E998-38DE-4355-8B6C-C1B8D57AAE39
UID:D5C0E998-38DE-4355-8B6C-C1B8D57AAE39
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034141Z
UID:49ACADED-77FF-4F37-A2DE-2A4329C5A3C2
DTEND;TZID=America/Denver:20121102T141500
TRANSP:OPAQUE
SUMMARY:How to build\, use and grow internal tools (Keavy McMinn)
DTSTART;TZID=America/Denver:20121102T133000
DTSTAMP:20121025T040303Z
LOCATION:Track 2
SEQUENCE:4
DESCRIPTION:Keavy is part of the internal tools team at Github. She will
  give an insight into some of the internal tools used at Github\, and di
 scuss the importance of building and using software that enables and sup
 ports your team\, whether onsite or distributed\, to be more productive\
 , informed\, motivated and happy.
BEGIN:VALARM
X-WR-ALARMUID:32F468B4-7775-4E6B-AD9D-0478A8133E21
UID:32F468B4-7775-4E6B-AD9D-0478A8133E21
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034145Z
UID:9FAE1818-4629-4632-97DF-E2521FFB0FAD
DTEND;TZID=America/Denver:20121102T151500
TRANSP:OPAQUE
SUMMARY:Change your tools\, change your outcome - the next frontier of d
 eployment (Dr Nic Williams)
DTSTART;TZID=America/Denver:20121102T143000
DTSTAMP:20121025T040340Z
LOCATION:Track 2
SEQUENCE:4
DESCRIPTION:Is “app-centric deployment” the best mental model and toolch
 ain for shipping changes to productions systems? Or is “environment-cent
 ric” or “node-centric”\, enabled with frameworks like Chef or Puppet\, t
 he most powerful & effective model of the system to allow you to deploy 
 and manage change?\n\nOr perhaps we should describe the entire system - 
 all the apps\, all the system dependencies\, all the interconnections\, 
 all the scale attributes - and command it to come into existence? To com
 mand the system to go from nothing to v1 to v2 to v3\, where each versio
 n includes changes in attributes of the system.\n\nWhere should configur
 ation/manifests/attributes go? Source code files in the config folder? P
 aaS configuration or environment variables? Or should components of a sy
 stem dynamically discover information about itself and configure itself?
 \n\nPerhaps we need the benefits of a “system-centric” build toolchain\,
  with an “app-centric” user/developer experience to trigger deploys\, wi
 th a “node-centric” experience for sysadmins.\n\nIn this talk\, we will 
 reflect on the current state of deploying production systems\, including
  build/deploy toolchains\, and continuous deployment. We’ll look at the 
 attributes of a complete system\, how we explicitly or implicitly descri
 be them and their relationships\, and how to orchestrate changes in the 
 system - from app-centric\, node-centric and system-centric views.\n\nLe
 t’s discuss the difference between deployment in month 1 and living with
  your system for the next 59 months.
BEGIN:VALARM
X-WR-ALARMUID:4886CE83-992E-44F2-9B2A-812A9A8A9133
UID:4886CE83-992E-44F2-9B2A-812A9A8A9133
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034152Z
UID:44A6107C-BE29-4AC9-BB43-4951FB1CD121
DTEND;TZID=America/Denver:20121102T161500
TRANSP:OPAQUE
SUMMARY:Inside RubyMotion (Laurent Sansonetti)
DTSTART;TZID=America/Denver:20121102T153000
DTSTAMP:20121025T040426Z
LOCATION:Track 2
SEQUENCE:4
DESCRIPTION:RubyMotion is a relatively new toolchain for iOS development
  using Ruby. With RubyMotion\, developers can finally write full-fledged
  native iPhone or iPad apps in Ruby\, the language you all know and love
 . In this session\, we will cover how RubyMotion works\, we will talk ab
 out its internals and what makes it unique\, and we will show how easy i
 t is to write an iOS app with it.
BEGIN:VALARM
X-WR-ALARMUID:5D3AFF2C-AA6D-4503-A384-7E4578812FF0
UID:5D3AFF2C-AA6D-4503-A384-7E4578812FF0
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034157Z
UID:FE4F6C5A-C21A-42A4-AECD-E1F4F97FF415
DTEND;TZID=America/Denver:20121102T171500
TRANSP:OPAQUE
SUMMARY:RubyMotion for Faster Client/Server Development (Tammer Saleh)
DTSTART;TZID=America/Denver:20121102T163000
DTSTAMP:20121025T040509Z
LOCATION:Track 2
SEQUENCE:4
DESCRIPTION:Tammer Saleh\, cofounder of Thunderbolt Labs will take you t
 hrough the process of writing a RubyMotion iOS application that interfac
 es seamlessly with a backend Rails API. He'll explore all of the modern 
 iOS techniques through RubyMotion\, while using Storyboards\, Bundler\, 
 and pulling data from a JSON API. In the process\, he'll discuss the mer
 its and pitfalls of using RubyMotion\, and when it is and isn't appropri
 ate for your project.
BEGIN:VALARM
X-WR-ALARMUID:9C7CC2E3-9BA4-4237-A868-09C0693E2097
UID:9C7CC2E3-9BA4-4237-A868-09C0693E2097
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034235Z
UID:CBAEED59-F112-47A7-9D76-D2B53E452D1E
DTEND;TZID=America/Denver:20121102T113000
TRANSP:OPAQUE
SUMMARY:Asynchronous Processing for Fun and Profit (Mike Perham)
DTSTART;TZID=America/Denver:20121102T113000
DTSTAMP:20121025T040229Z
SEQUENCE:2
DESCRIPTION:Learn the gotchas and secrets to successful message processi
 ng. The naive approach is to just throw a message on a queue but there m
 any different trade-offs which can make your life miserable if not accou
 nted for when designing your application. This session will show you tho
 se gotchas and secrets.
BEGIN:VALARM
X-WR-ALARMUID:66BCC8A1-67B3-480D-9DC7-FC626E7327F8
UID:66BCC8A1-67B3-480D-9DC7-FC626E7327F8
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034240Z
UID:B4A073DB-6412-47D2-9A7A-D4E3E369C4E5
DTEND;TZID=America/Denver:20121102T141500
TRANSP:OPAQUE
SUMMARY:DRb vs EventMachine Showdown (Davy Stevenson)
DTSTART;TZID=America/Denver:20121102T133000
DTSTAMP:20121025T040313Z
LOCATION:Track 3
SEQUENCE:5
DESCRIPTION:Our enterprise product has used DRb as a communication layer
  for a number of years now. With the growth in popularity of EventMachin
 e\, it is time for us to evaluate whether a switch is right. This talk w
 ill discuss our current DRb setup\, our process for comparing DRb and Ev
 entMachine and our comparison results\, the decision on whether to switc
 h\, and either our reasoning to stay with DRb or how the resulting switc
 h to EventMachine was handled.
BEGIN:VALARM
X-WR-ALARMUID:83C5113C-8186-4D64-9168-FB837556D980
UID:83C5113C-8186-4D64-9168-FB837556D980
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034244Z
UID:A50966EF-B271-4FC9-8B3A-BB494EBEE799
DTEND;TZID=America/Denver:20121102T151500
TRANSP:OPAQUE
SUMMARY:Rails Is A Follower: what we can learn from dRuby's metaprogramm
 ing magic (Makoto Inoue\, Masatoshi Seki)
DTSTART;TZID=America/Denver:20121102T143000
DTSTAMP:20121025T040353Z
LOCATION:Track 3
SEQUENCE:4
DESCRIPTION:"dRuby came long before Rails. It uses metaprogramming featu
 res for distributed programming. Proxy objects “automagically” delegate 
 method calls to remote objects. ... dRuby is a good example of a very fl
 exible system implemented by Ruby. In this sense\, Rails is a follower."
  - Matz\n\nMasatoshi Seki\, the author of ERB and dRuby\, and Makoto Ino
 ue\, the translator of "The dRuby book"　will show how dRuby's metaprogra
 mming magic works\, and inspire you to use the full power of ruby.\n\nWe
  will explain the history and design concepts behind dRuby\, before divi
 ng into the details of the metaprogramming magic that makes it all work.
  dRuby will show you a side of Ruby you've never seen before. Let's expl
 ore together.
BEGIN:VALARM
X-WR-ALARMUID:90FAFF2A-8873-43A5-BCA7-EC09D8F31C62
UID:90FAFF2A-8873-43A5-BCA7-EC09D8F31C62
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034251Z
UID:380EB376-22E9-4536-A32B-C3603F651911
DTEND;TZID=America/Denver:20121102T161500
TRANSP:OPAQUE
SUMMARY:There and Back Again -or- How I Set out to Benchmark an Algorith
 m and Ended Up Fixing Ruby (Joshua Ballanc
DTSTART;TZID=America/Denver:20121102T153000
DTSTAMP:20121025T040437Z
LOCATION:Track 3
SEQUENCE:4
DESCRIPTION:Come hear a tale of how one programmer wanted to write a del
 egation library. Knowing that the wise elders have always stated "it's n
 ot true until you measure it"\, the programmer decided to benchmark the 
 alternatives. But this was no ordinary benchmark. Down paths winding and
  mysterious\, the programmer wielded his trusty "gdb" and became profici
 ent with the weapon they call "libgmalloc". Finally\, this sinister benc
 hmark led the programmer straight into the dark heart of the Ruby Garbag
 e Collector! But fear not...this tale has a happy ending.
BEGIN:VALARM
X-WR-ALARMUID:F530CF44-0BB1-4257-84D1-57B030AE321B
UID:F530CF44-0BB1-4257-84D1-57B030AE321B
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T034300Z
UID:6D2E8D9B-B335-4C18-B619-0528E7547CAB
DTEND;TZID=America/Denver:20121102T171500
TRANSP:OPAQUE
SUMMARY:Making Security Priority Zero (Rein Henrichs)
DTSTART;TZID=America/Denver:20121102T163000
DTSTAMP:20121025T040520Z
LOCATION:Track 3
SEQUENCE:5
DESCRIPTION:Is security a priority for your team? The recent compromises
  of LinkedIn\, eharmony\, Last.fm\, and Sony (twenty times) show that it
 's not enough to make it "a priority": it needs to be priority zero.\n\n
 Learn how to build a security process that will help you detect and miti
 gate vulnerabilities at all levels and across all system boundaries.\n\n
 Learn how to (more) accurately assess risk and make smart decisions abou
 t when and how to address security vulnerabilities.\n\nLearn how to resp
 ond effectively to contain and minimize damage when you are compromised\
 , and how to recover service as quickly as possible.\n\nLearn how to dis
 close an incident to the public in an open\, honest\, responsible way th
 at gives your users the information they need to protect themselves and 
 opens the door to rebuilding lost trust and goodwill.\n\nLearn how not t
 o do the above from the tragicomic examples of others.
BEGIN:VALARM
X-WR-ALARMUID:A7CE7C2B-D522-46EE-8FEC-E2F7E56B0D42
UID:A7CE7C2B-D522-46EE-8FEC-E2F7E56B0D42
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035017Z
UID:F88C2798-6709-4E1B-BE14-A37920EC600D
DTEND;TZID=America/Denver:20121103T181500
TRANSP:OPAQUE
SUMMARY:Intimate Chat with Matz
DTSTART;TZID=America/Denver:20121103T173000
DTSTAMP:20121025T040944Z
SEQUENCE:2
DESCRIPTION:We're doing the Matz Q and A differently this year. Submit y
 our questions throughout the conferences and come see Evan and Matz disc
 uss them!
BEGIN:VALARM
X-WR-ALARMUID:DABC787E-1608-4F7A-AADF-E6BED3F0CBB1
UID:DABC787E-1608-4F7A-AADF-E6BED3F0CBB1
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035025Z
UID:9BF0ED00-DF5F-49BF-AB98-164ABBF26319
DTEND;TZID=America/Denver:20121103T111500
TRANSP:OPAQUE
SUMMARY:Keynote: The Insufficiency of Good Design (Sarah Mei)
DTSTART;TZID=America/Denver:20121103T102000
DTSTAMP:20121025T040557Z
SEQUENCE:3
DESCRIPTION:We all want to write good code\, and there is no shortage of
  advice on how to do that. SOLID. SOA. SRP. LoD. These are important - w
 ithout them\, we'd all be writing lousy code. But none of them address t
 he single factor that has the biggest impact on the quality of a codebas
 e.\n\nThat factor is Other People. The people you're working with affect
  the codebase more than you do\, in aggregate\, if there's more than a f
 ew of them. And it's not just the individuals. How your team is organize
 d\, how it's managed\, and how it communicates all leave unmistakeable f
 ingerprints on the code. Over time\, a codebase grows to resemble its cr
 eators\, reflecting the good and the ugly of the individuals\, as well a
 s the good and the ugly of their relationships.\n\nThis is not always a 
 disaster. But it means that a team of really smart individuals can\, tog
 ether\, end up writing terrible code. And it means that a lot of issues 
 that get labeled "software design problems" cannot be solved by merely a
 pplying the right software design principle. A team can struggle with a 
 problem like this for months\, and then a small\, often-inadvertent adju
 stment to the team dynamics makes the problem suddenly tractable.\n\nI'l
 l show you some common "design" problems in Rails applications that actu
 ally stem directly from the structure of a dysfunctional team. I'll talk
  about what you can do to solve them\, and I'll give you some tools for 
 distinguishing between those types of issues and plain old lousy code. Y
 ou'll gain a new appreciation for the invisible forces that guide our de
 sign decisions day-to-day.
BEGIN:VALARM
X-WR-ALARMUID:43B28B63-67FB-4081-950A-0DA845F0E4B9
UID:43B28B63-67FB-4081-950A-0DA845F0E4B9
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035030Z
UID:43B8B67B-55B3-4373-9B23-660087B66A86
DTEND;TZID=America/Denver:20121103T133000
TRANSP:OPAQUE
SUMMARY:Lunch
DTSTART;TZID=America/Denver:20121103T121500
DTSTAMP:20121025T041033Z
SEQUENCE:2
BEGIN:VALARM
X-WR-ALARMUID:44B096A4-4427-41C5-8F99-296A94D8FA50
UID:44B096A4-4427-41C5-8F99-296A94D8FA50
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035038Z
UID:CCEFF391-1FE8-4722-BADC-A967C2BFA361
DTEND;TZID=America/Denver:20121103T102000
TRANSP:OPAQUE
SUMMARY:Announcements
DTSTART;TZID=America/Denver:20121103T100000
DTSTAMP:20121025T035038Z
SEQUENCE:1
BEGIN:VALARM
X-WR-ALARMUID:30A0F023-F39F-4301-A18E-BE43A5748018
UID:30A0F023-F39F-4301-A18E-BE43A5748018
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035208Z
UID:B57F4FED-6271-4793-A067-9CB67863C111
DTEND;TZID=America/Denver:20121103T121500
TRANSP:OPAQUE
SUMMARY:Game Development and Ruby (Andrew Nordman)
DTSTART;TZID=America/Denver:20121103T113000
DTSTAMP:20121025T040610Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Game development is a topic within Ruby that is generally vi
 ewed as a novelty\, only for toy projects or as a primitive tool to lear
 n Ruby. There remains\, however\, a wide area of mostly untapped potenti
 al for Ruby to be used in the larger area of game development. As game e
 ngines get more complex\, higher level scripting languages are being int
 roduced and integrated with lower level programming languages to create 
 the modern games you see today.\n\nIn this session\, we traverse the pro
 s and cons of using Ruby in game development from toy projects to full-s
 cale engine tools\, what improvements could be made to Ruby to aid its a
 doption in the game development industry\, and why Ruby has great potent
 ial in the area of high-level game engine code.
BEGIN:VALARM
X-WR-ALARMUID:A4848642-0B86-413A-BE9B-0E9380B772E0
UID:A4848642-0B86-413A-BE9B-0E9380B772E0
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035215Z
UID:9FED3F0A-AAC6-4EDA-B085-B6AA888BDABE
DTEND;TZID=America/Denver:20121103T141500
TRANSP:OPAQUE
SUMMARY:Interface testing: Creating a Diablo 3 bot using jRuby and Sikul
 i UI (Rodrigo Franco)
DTSTART;TZID=America/Denver:20121103T133000
DTSTAMP:20121025T040700Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Interface testing is boring. Making sure an image is always 
 there when the page was loaded and also ensuring its positioned in the r
 ight place is really boring. A lot of bugs are not found because we don'
 t have an easy way to find this little devils.\n\nIn this talk\, Rodrigo
  Franco will guide you through the creation of a custom tailored tool\, 
 created to solve an specific interface problem that thwarts millons of p
 eople in the entire world - find out the most efficient way to fill your
  pockets with virtual gold in the online RPG Diablo 3.
BEGIN:VALARM
X-WR-ALARMUID:11771B8B-A6C8-4A6E-AF57-CF3EFDE58915
UID:11771B8B-A6C8-4A6E-AF57-CF3EFDE58915
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035219Z
UID:5CE4DCC0-36E0-4570-AAE0-C41BD05B5183
DTEND;TZID=America/Denver:20121103T151500
TRANSP:OPAQUE
SUMMARY:Simulating the world with Ruby (Bryan Liles)
DTSTART;TZID=America/Denver:20121103T143000
DTSTAMP:20121025T040749Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:You want to model a world. That world has millions of people
 \, who also interact with each other. How would you even start tackling 
 this model in Ruby? I'd like to demonstrate one solution. In this talk\,
  we'll explore this problem from inception. See how the process can evol
 ve from the simple first model to a much more complicated interactive to
 ol. This talk will cover topics such as getting Ruby to do more than one
  thing at once\, sampling discrete probability distributions in constant
  time\, and the perils of garbage collection and a few other suprises.
BEGIN:VALARM
X-WR-ALARMUID:A253495A-7084-4CF3-9128-6EA6AF9B74D2
UID:A253495A-7084-4CF3-9128-6EA6AF9B74D2
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035222Z
UID:4C0BF495-EDA1-40E4-8BEF-7C8172FEC64E
DTEND;TZID=America/Denver:20121103T161500
TRANSP:OPAQUE
SUMMARY:Thinking in Objects (Josh Susser)
DTSTART;TZID=America/Denver:20121103T153000
DTSTAMP:20121025T040833Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Ruby is one of the best object-oriented languages around. Ub
 iquitous objects\, duck-typing\, mixins\, expressive syntax with low cer
 emony\, powerful reflection and metaprogramming. But Ruby has a mixed he
 ritage that incorporates functional and procedural models along with OOP
 . This flexibility provides many options for how to solve problems\, but
  it can also lead even experienced developers into a confusing mix of pr
 ogramming styles and hard-to-understand software designs. But what can w
 e do to keep things simple and easy to understand?\n\nAlan Kay is often 
 quoted as saying “Perspective is worth 80 IQ points.” So let’s get the r
 ight perspective on Ruby and look at it from the direction of objects an
 d OOP. This talk examines the fundamental concepts of object-orientation
 \, and presents a simple model for how to think about objects and object
 -oriented programming. Why are objects so useful? What makes object-orie
 nted programs easy to write and maintain? What are the pitfalls of not k
 eeping to the OOP model? And how many slides can it take to explain two 
 sentences? We’ll answer all these questions and more!
BEGIN:VALARM
X-WR-ALARMUID:239D9B31-5375-483E-B2E5-631880879947
UID:239D9B31-5375-483E-B2E5-631880879947
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035227Z
UID:12D7CF05-0ED0-41B4-967E-218FDDC6122A
DTEND;TZID=America/Denver:20121103T171500
TRANSP:OPAQUE
SUMMARY:Boundaries (Gary Bernhardt)
DTSTART;TZID=America/Denver:20121103T163000
DTSTAMP:20121025T040908Z
LOCATION:Track 1
SEQUENCE:3
DESCRIPTION:Some people test in isolation\, mocking everything except th
 e class under test. We'll start with that idea\, quickly examine the dra
 wbacks\, and ask how we might fix them without losing the benefits. This
  will send us on a trip through behavior vs. data\, mutation vs. immutab
 ility\, interface vs. data dependencies\, how data shape affords paralle
 lism\, and what a system optimizing each of these for natural isolation 
 might look like.
BEGIN:VALARM
X-WR-ALARMUID:3DE5A07F-A3A7-4C0C-AD3C-0099BD583EAE
UID:3DE5A07F-A3A7-4C0C-AD3C-0099BD583EAE
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035233Z
UID:6DC7164C-3377-4F09-80D8-A506DB09FB0D
DTEND;TZID=America/Denver:20121103T121500
TRANSP:OPAQUE
SUMMARY:Testing Should Be Fun (Noel Rappin)
DTSTART;TZID=America/Denver:20121103T113000
DTSTAMP:20121025T040627Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:Kent Beck’s first articles about Test-Driven Development. I 
 don’t think I’m alone in being drawn to TDD at first because it was fun.
  The quick and consistent feedback and the ability to turn complicated p
 roblems into a series of smaller problems to be solved made TDD developm
 ent seem more like a game than work.\n\nEventually TDD became less fun. 
 Slow tests made running test suites a cruel joke. Test code gets bulky\,
  and is hard to refactor because\, of course\, tests don’t have their ow
 n tests.\n\nLet’s fix that. We’ll show some notorious testing joy-killer
 s\, like slow tests\, hard to read tests\, tests that paper over bad des
 igns rather than driving new ones. And we’ll squash them\, and regain te
 sting delight.
BEGIN:VALARM
X-WR-ALARMUID:950F9A79-699B-490F-B5CB-01782B2C83AA
UID:950F9A79-699B-490F-B5CB-01782B2C83AA
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035237Z
UID:AA6D1562-C951-4583-9C2B-9D7A66A90D3C
DTEND;TZID=America/Denver:20121103T141500
TRANSP:OPAQUE
SUMMARY:Could a Machine Ever Write Tests For Our Code? New Verification 
 Techniques For Ruby (Loren Segal)
DTSTART;TZID=America/Denver:20121103T133000
DTSTAMP:20121025T040716Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:TDD is a great way to test code\, but have you ever wondered
  if there are ways to leverage the awesome power of computers and help u
 s write better tests? Research in the field of formal verification has s
 hown promising results with tools that analyze programs for logic errors
  and can even figure out what input values caused those failures. Howeve
 r\, until now\, none of that research was ever used with Ruby. This talk
  discusses RubyCorrect\, a research project that attempts to apply verif
 ication techniques like "extended static checking" and "symbolic executi
 on" to the world of Ruby programs. We look at how these techniques work 
 and how they could potentially improve the kinds of program faults we ca
 n detect. Machines that write our tests? So crazy that it just might wor
 k!
BEGIN:VALARM
X-WR-ALARMUID:5D16AF12-5E33-49DE-A89E-A44C91740BF3
UID:5D16AF12-5E33-49DE-A89E-A44C91740BF3
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035244Z
UID:3E1E6D24-1BB8-4901-B21D-B9BDB76ECEC9
DTEND;TZID=America/Denver:20121103T151500
TRANSP:OPAQUE
SUMMARY:Modeling a high performance (Energy Flow) Calculation Web Applic
 ation in Ruby (Dennis Schoenmakers)
DTSTART;TZID=America/Denver:20121103T143000
DTSTAMP:20121025T040804Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:Since 2008 we are building a high-performance calculation we
 b engine that supplies the 'Energy Transition Model'. This model is used
  by governments\, companies in North-West Europe to monitor and plan ene
 rgy policy.\n\nCurrently\, the system we use
BEGIN:VALARM
X-WR-ALARMUID:8060E9D5-22D4-412D-9B20-08ECB90E6462
UID:8060E9D5-22D4-412D-9B20-08ECB90E6462
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035248Z
UID:AD8020FD-F288-4F8B-AA95-27296D5836D3
DTEND;TZID=America/Denver:20121103T161500
TRANSP:OPAQUE
SUMMARY:Machine learning for fun and profit: the story of how my custome
 r wrote my code (Chris Nelson)
DTSTART;TZID=America/Denver:20121103T153000
DTSTAMP:20121025T040847Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:On a project recently we were fortunate to have a detailed s
 et of cucumber specs about how a certain part of our system should work.
  At some point during the tedious process of implementing these\, my pai
 r said "Hey\, these look kinda like a decision table". This started a il
 luminating journey into the world of machine learning\, and ended up wit
 h us deleting a whole bunch of code. In this session we'll talk about ho
 w to recognize what situations might be a good fit for machine learning\
 , how to do it in ruby\, and take a brief look at a very small gem that 
 resulted from our explorations.
BEGIN:VALARM
X-WR-ALARMUID:C4373B7C-BEED-445B-A77F-75AB337A4D8E
UID:C4373B7C-BEED-445B-A77F-75AB337A4D8E
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035254Z
UID:81752C77-9374-4EDE-80D4-A65A55477B44
DTEND;TZID=America/Denver:20121103T171500
TRANSP:OPAQUE
SUMMARY:Rapid Programming Language Prototypes with Ruby & Racc (Tom Lee)
 
DTSTART;TZID=America/Denver:20121103T163000
DTSTAMP:20121025T040923Z
LOCATION:Track 2
SEQUENCE:3
DESCRIPTION:Experimenting with programming languages is a whole lot of f
 un. Unfortunately\, it can mean writing a stack of boilerplate before yo
 u really get to do anything interesting. By the time you've got Yacc/Bis
 on\, Flex and GCC playing nicely together\, you might well be wondering 
 why it all has to be this hard.\n\nGreat news: it doesn't!\n\nRacc is Ya
 cc for Ruby: a LALR(1) parser generator that emits Ruby code from a gram
 mar file. The Ruby/Racc combination is the most rapid means I've found f
 or prototyping programming language ideas\, and to prove it I intend to 
 build a real\, working compiler during this presentation.\n\nIf you're a
  newbie to the world of compiler construction\, I'll also be giving a br
 ief overview of a generalized compiler architecture along with some basi
 c terminology.
BEGIN:VALARM
X-WR-ALARMUID:30BFD797-C578-44AA-95CE-56C38EEA9CC9
UID:30BFD797-C578-44AA-95CE-56C38EEA9CC9
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035259Z
UID:7F4815DD-DF81-4595-82BC-05B4EA3EC8D6
DTEND;TZID=America/Denver:20121103T121500
TRANSP:OPAQUE
SUMMARY:mruby meets iOS and RTOS! (Masayoshi Takahashi\, Yuichiro MASUI\
 , Yurie Yamane)
DTSTART;TZID=America/Denver:20121103T113000
DTSTAMP:20121025T040643Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:We have hacked mruby on non-PC OS. At the RubyConf 2012\, we
  will talk and share our experiences.\n\nOur talks have two parts (actua
 lly\, we have two small talks)\n\nRuby + iOS = Super awesome!\nmruby for
  embedded systems\nFirst part (iOS):\nAre you fed up with Objective-C? N
 ow\, you can build iOS apps with mruby.\n\nMobiRuby aims to replace Obje
 ctive-C/C/Java on mobile platforms with Ruby\, just like you can use Lua
  or Mono to build apps on those platforms. In this presentation\, I will
  talk about how to create iOS app using MobiRuby and MobiRuby internals.
 \n\nSecond part (RTOS):\nThe TOPPERS/ASP and TOPPERS/SSP (http://www.top
 pers.jp/en/) kernel is a famous RTOS in Japan\, as extended and improved
  kernel for embedded systems\, based on the standard profile of Micro IT
 RON4.0. We have used mruby on TOPPERS RTOS. We will show the issues abou
 t embedded systems and how to solve them.
BEGIN:VALARM
X-WR-ALARMUID:367D1678-FBF1-47F8-BF99-B9F48506ED19
UID:367D1678-FBF1-47F8-BF99-B9F48506ED19
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035303Z
UID:680F306A-619C-4503-969C-4FB02039E0FC
DTEND;TZID=America/Denver:20121103T141500
TRANSP:OPAQUE
SUMMARY:krypt - The next level of Ruby cryptography (Martin Boßlet)
DTSTART;TZID=America/Denver:20121103T133000
DTSTAMP:20121025T040731Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:Last year it was an idea\, more of it in our heads than on g
 ithub. This year\, krypt is reality\, it's growing quickly and its goal 
 is to become the successor of the OpenSSL extension. Learn about why we 
 need a successor at all\, about the evils of OpenSSL certificate validat
 ion and how krypt will improve all this\, running without restrictions o
 n any Ruby platform. I'd like to contribute to putting an end to "Ruby i
 s slow" by showing you how krypt's ASN.1/DER parser runs even faster tha
 n native OpenSSL C code or native Java crypto libraries. You'll learn ab
 out how you can use krypt today and how you can extend it to suit your n
 eeds by plugging in different "providers". Even if you are not particula
 rly interested in cryptography\, you might still be interested in how kr
 ypt takes testing to a new level\, setting out to become one of the best
 -tested cryptography libraries out there. You probably know about RSpec\
 , code coverage tools for Ruby\, C and Java code\, and Valgrind for sort
 ing out memory issues. But krypt takes it one step further by making ran
 dom testing an integral part of its test suite. Fuzzers are not for bad 
 guys only - we all can benefit from random testing\, with any applicatio
 n that accepts external input. Let me show you how krypt has spawned Fuz
 zBert\, a simple and extensible random testing framework that allows you
  to set up an effective random testing suite in no time. Finally\, in th
 e attempt to run as much of krypt as possible in plain Ruby\, let me sho
 w you binyo\, which allows dealing effectively with binary IO and low-le
 vel byte manipulation in particular\, in all Rubies. If you implement pr
 otocols on the bit & byte level\, need to do bit-level\, exact-width ope
 rations on raw bytes\, then binyo is what you have been looking for - sp
 eed up your code without having to deal with any of the implications tha
 t are inherent to Strings.
BEGIN:VALARM
X-WR-ALARMUID:AA82CC36-F46F-4AA9-9005-97F367FBE22D
UID:AA82CC36-F46F-4AA9-9005-97F367FBE22D
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035310Z
UID:8D3A3C68-0880-4646-926F-2583A1F6A255
DTEND;TZID=America/Denver:20121103T151500
TRANSP:OPAQUE
SUMMARY:Recommendation Engines with Redis and Ruby (Evan Light)
DTSTART;TZID=America/Denver:20121103T143000
DTSTAMP:20121025T040822Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:A recent client asked me to build a recommendation engine fo
 r them. Coming into this with a basic knowledge of statistical math\, we
  ultimately built a relatively simple recommendation engine in Ruby. The
  design makes heavy use of Redis Sets\, Lists\, and Hashes in order to g
 reatly reduce the number of SQL queries to provide recommendations.\n\nT
 his talk will be a case study of sorts discussing object-oriented techni
 ques in building a scalable service as well as how we leveraged Redis to
  both simplify and expedite some of the operations that would have other
 wise brought the service to a crawl.
BEGIN:VALARM
X-WR-ALARMUID:68301A5C-19CC-4AFD-BAE0-D9055932451E
UID:68301A5C-19CC-4AFD-BAE0-D9055932451E
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035316Z
UID:75ABF413-65C5-4318-9277-F3B7675BBF4E
DTEND;TZID=America/Denver:20121103T161500
TRANSP:OPAQUE
SUMMARY:Ruby and the world of words (Elise Huard)
DTSTART;TZID=America/Denver:20121103T153000
DTSTAMP:20121025T040857Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:Natural Language Processing is a common names for all the te
 chniques to parse and interpret natural\, or human\, languages. Whether 
 it's detecting spam\, spell checking\, the tone or the subject of a text
 \, these techniques are turning out to be immensely useful to handle tex
 t data in any kind of volume. Python is known to have a good toolkit\, b
 ut it turns out Ruby can be used just as much! Using interfaces with var
 ious libraries\, it's possible to make intelligent scripts in the langua
 ge we all know and love.
BEGIN:VALARM
X-WR-ALARMUID:04EAC284-E79E-4C4B-95F6-0E54AACC177C
UID:04EAC284-E79E-4C4B-95F6-0E54AACC177C
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
BEGIN:VEVENT
CREATED:20121025T035321Z
UID:6A1DBCAA-45B4-4792-917E-1ECA05E7486A
DTEND;TZID=America/Denver:20121103T171500
TRANSP:OPAQUE
SUMMARY:Ruby's Instrumentation Crisis (Michael Bernstein)
DTSTART;TZID=America/Denver:20121103T163000
DTSTAMP:20121025T040934Z
LOCATION:Track 3
SEQUENCE:3
DESCRIPTION:Ruby is fast. I don't mean that it's "not slow\," I mean tha
 t the language itself and its users move quickly. When major frameworks 
 and influential Rubyists declare that a new version should be supported 
 and an old one deprecated\, many\, many people follow. The switch from R
 uby 1.8.7 to 1.9.2/3 left behind some valuable tools that Rubyists relie
 d on to introspect on running processes. Memprof\, REE\, and other profi
 ling technologies aren't 1.9.2 compatible. JRuby can leverage the JVM's 
 tools\, and Rubinius has some ideas floating\, but as a community\, we'r
 e flying blind.\n\nIn this talk I'll bring in examples from other modern
  languages such as Java\, Javascript\, and Erlang\, to show how they're 
 solving the problems of profiling processes\, debugging code\, and intro
 specting on processes. I'll of course discuss what JRuby and Rubinius ha
 ve to offer\, and look to tools like DTrace for inspiration as to what R
 uby can do to ensure a more stable\, reliable Ruby 2.0 and beyond.
BEGIN:VALARM
X-WR-ALARMUID:7568E897-51CE-4FA1-93D3-F9AED4C8C2DF
UID:7568E897-51CE-4FA1-93D3-F9AED4C8C2DF
TRIGGER;VALUE=DATE-TIME:19760401T005545Z
X-APPLE-DEFAULT-ALARM:TRUE
ACTION:NONE
END:VALARM
END:VEVENT
END:VCALENDAR
